<?php

namespace App\DataFixtures;

use App\Entity\Arrondissement;
use App\Entity\Categorie;
use App\Entity\Signalement;
use App\Entity\Utilisateur;
use App\Entity\Ville;
use App\Enum\StatutSignalement;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Bundle\FixturesBundle\FixtureGroupInterface;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Doctrine\Persistence\ObjectManager;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class AppFixtures extends Fixture implements DependentFixtureInterface, FixtureGroupInterface
{
  private $passwordHasher;

  public function __construct(UserPasswordHasherInterface $passwordHasher)
  {
    $this->passwordHasher = $passwordHasher;
  }

  public function getDependencies(): array
  {
    return [
        DepartementFixtures::class,
        VilleFixtures::class,
        ArrondissementFixtures::class,
    ];
  }

  public static function getGroups(): array
  {
    return ['app'];
  }

  public function load(ObjectManager $manager): void
  {
    echo "üöÄ D√©but du chargement d'AppFixtures...\n";

    // V√©rifier que les fixtures d√©pendantes ont √©t√© charg√©es correctement
    if (!$this->hasReference('ville_cotonou', Ville::class)) {
      throw new \RuntimeException('Les fixtures de villes doivent √™tre charg√©es avant AppFixtures');
    }

    // R√©cup√©rer les villes √† partir des r√©f√©rences
    $villes = [];
    $villeRefs = ['cotonou', 'porto-novo', 'abomey-calavi', 'parakou', 'lokossa'];
    foreach ($villeRefs as $ref) {
      if ($this->hasReference('ville_' . $ref, Ville::class)) {
        $villes[] = $this->getReference('ville_' . $ref, Ville::class);
      }
    }

    if (empty($villes)) {
      throw new \RuntimeException('Aucune ville n\'a √©t√© trouv√©e dans les r√©f√©rences');
    }

    echo "‚úÖ " . count($villes) . " villes r√©cup√©r√©es des r√©f√©rences\n";

    // R√©cup√©ration des arrondissements par requ√™te directe
    $arrondissementRepository = $manager->getRepository(Arrondissement::class);
    $arrondissements = $arrondissementRepository->findAll();

    echo "‚úÖ " . count($arrondissements) . " arrondissements trouv√©s en base\n";

    // Pr√©paration d'un tableau d'arrondissements par ville
    $arrondissementsParVille = [];
    foreach ($arrondissements as $arrondissement) {
      $ville = $arrondissement->getVille();
      if ($ville !== null) {
        $villeId = $ville->getId();
        if ($villeId !== null) {
          if (!isset($arrondissementsParVille[$villeId])) {
            $arrondissementsParVille[$villeId] = [];
          }
          $arrondissementsParVille[$villeId][] = $arrondissement;
        }
      }
    }

    // Cr√©ation de cat√©gories avec ic√¥nes et couleurs
    $categories = [];
    $categoriesData = [
        ['nom' => 'Voirie', 'description' => 'Probl√®mes li√©s √† la chauss√©e, trottoirs, etc.', 'icone' => 'fa-road', 'couleur' => '#f39c12'],
        ['nom' => '√âclairage', 'description' => 'Probl√®mes li√©s √† l\'√©clairage public', 'icone' => 'fa-lightbulb', 'couleur' => '#f1c40f'],
        ['nom' => 'Propret√©', 'description' => 'Probl√®mes de d√©chets, d√©p√¥ts sauvages, etc.', 'icone' => 'fa-trash', 'couleur' => '#27ae60'],
        ['nom' => 'Espaces verts', 'description' => 'Probl√®mes dans les parcs et jardins', 'icone' => 'fa-tree', 'couleur' => '#2ecc71'],
        ['nom' => 'Mobilier urbain', 'description' => 'Probl√®mes avec les bancs, poubelles, etc.', 'icone' => 'fa-bench', 'couleur' => '#8e44ad'],
        ['nom' => 'Assainissement', 'description' => 'Probl√®mes d\'eaux us√©es, caniveaux bouch√©s', 'icone' => 'fa-water', 'couleur' => '#3498db'],
        ['nom' => 'Inondation', 'description' => 'Zones inond√©es ou √† risque d\'inondation', 'icone' => 'fa-water-rise', 'couleur' => '#2980b9'],
    ];

    foreach ($categoriesData as $categorieData) {
      $categorie = new Categorie();
      $categorie->setNom($categorieData['nom']);
      $categorie->setDescription($categorieData['description']);
      $categorie->setIcone($categorieData['icone']);
      $categorie->setCouleur($categorieData['couleur']);
      $manager->persist($categorie);
      $categories[] = $categorie;
    }

    echo "‚úÖ " . count($categories) . " cat√©gories cr√©√©es\n";

    // Cr√©ation d'utilisateurs
    $utilisateurs = [];

    // Admin
    $admin = new Utilisateur();
    $admin->setEmail('admin@cityflow.bj');
    $admin->setNom('Admin');
    $admin->setPrenom('Super');
    $admin->setRoles(['ROLE_ADMIN']);
    $admin->setPassword($this->passwordHasher->hashPassword($admin, 'admin123'));
    $admin->setVilleResidence($villes[0]); // Cotonou
    $admin->setDateInscription(new \DateTime());
    $admin->setEstValide(true);
    $manager->persist($admin);
    $utilisateurs[] = $admin;

    // Mod√©rateur
    $moderateur = new Utilisateur();
    $moderateur->setEmail('modo@cityflow.bj');
    $moderateur->setNom('Modo');
    $moderateur->setPrenom('Super');
    $moderateur->setRoles(['ROLE_MODERATOR']);
    $moderateur->setPassword($this->passwordHasher->hashPassword($moderateur, 'modo123'));
    $moderateur->setVilleResidence($villes[1 % count($villes)]); // Protection contre l'index manquant
    $moderateur->setDateInscription(new \DateTime());
    $moderateur->setEstValide(true);
    $manager->persist($moderateur);
    $utilisateurs[] = $moderateur;

    // Utilisateurs normaux
    $prenoms = ['Kokou', 'Afiavi', 'Koffi', 'Abla', 'Kodjo'];
    $noms = ['Agossou', 'Ahouansou', 'Dossou', 'Tohoun', 'Adoko'];

    for ($i = 0; $i < 5; $i++) {
      $utilisateur = new Utilisateur();
      $utilisateur->setEmail("user{$i}@cityflow.bj");
      $utilisateur->setNom($noms[$i % count($noms)]);
      $utilisateur->setPrenom($prenoms[$i % count($prenoms)]);
      $utilisateur->setRoles(['ROLE_USER']);
      $utilisateur->setPassword($this->passwordHasher->hashPassword($utilisateur, 'user123'));
      $utilisateur->setVilleResidence($villes[$i % count($villes)]);
      $utilisateur->setDateInscription(new \DateTime());
      $utilisateur->setEstValide(true);
      $manager->persist($utilisateur);
      $utilisateurs[] = $utilisateur;
    }

    echo "‚úÖ " . count($utilisateurs) . " utilisateurs cr√©√©s\n";

    // Cr√©ation de signalements
    $statuts = [
        StatutSignalement::NOUVEAU,
        StatutSignalement::EN_COURS,
        StatutSignalement::RESOLU,
        StatutSignalement::ANNULE
    ];

    $titres = [
        'Nid de poule dangereux',
        'Lampadaire en panne',
        'D√©p√¥t sauvage de d√©chets',
        'Caniveau bouch√©',
        'Graffiti sur mur public',
        'Arbre tomb√© sur la voie',
        'Fuite d\'eau sur la chauss√©e',
        'Panneau de signalisation ab√Æm√©',
        'Trottoir endommag√©',
        'Passage pi√©ton effac√©',
        'Inondation apr√®s la pluie',
        'Eau stagnante',
        'Route impraticable',
        'Poteaux √©lectriques dangereux',
        'D√©versement d\'eaux us√©es'
    ];

    $descriptions = [
        'Un nid de poule profond est apparu apr√®s les derni√®res pluies, repr√©sentant un danger pour les z√©midjans et motards.',
        'Le lampadaire ne fonctionne plus depuis plusieurs jours, rendant la rue dangereusement sombre la nuit.',
        'Des d√©chets ont √©t√© d√©pos√©s ill√©galement au coin de la rue, cr√©ant une nuisance visuelle et olfactive.',
        'Le caniveau est compl√®tement bouch√© par des d√©chets et de la boue, causant des inondations √† chaque pluie.',
        'Un large graffiti est apparu sur le mur de l\'√©cole municipale, avec des propos inappropri√©s.',
        'Un arbre est tomb√© suite √† la temp√™te d\'hier soir, bloquant partiellement la voie.',
        'Une fuite d\'eau importante sur la chauss√©e depuis ce matin, cr√©ant des flaques et rendant la route glissante.',
        'Le panneau de signalisation a √©t√© tordu, probablement suite √† un choc, et n\'est plus lisible.',
        'Le trottoir pr√©sente une fissure importante qui s\'aggrandit et repr√©sente un risque de chute pour les pi√©tons.',
        'Les marquages du passage pi√©ton sont presque enti√®rement effac√©s, cr√©ant un danger √† cette intersection fr√©quent√©e.',
        'La zone est compl√®tement inond√©e apr√®s les pluies d\'hier, rendant impossible le passage des v√©hicules et pi√©tons.',
        'L\'eau stagne depuis plusieurs jours, cr√©ant un risque sanitaire et favorisant la prolif√©ration de moustiques.',
        'La route est devenue impraticable √† cause des trous et de l\'√©rosion caus√©e par les derni√®res pluies.',
        'Des poteaux √©lectriques penchent dangereusement et risquent de tomber sur la voie publique.',
        'Les eaux us√©es sont d√©vers√©es directement dans la rue, causant des odeurs naus√©abondes et un risque sanitaire.'
    ];

    // Cr√©er 30 signalements
    for ($i = 0; $i < 30; $i++) {
      $signalement = new Signalement();
      $signalement->setTitre($titres[$i % count($titres)]);
      $signalement->setDescription($descriptions[$i % count($descriptions)]);
      $signalement->setPhotoUrl('default.jpg');

      // Choisir une ville
      $ville = $villes[$i % count($villes)];
      $signalement->setVille($ville);

      // Associer un arrondissement de cette ville s'il en existe
      $villeId = $ville->getId();
      if (isset($arrondissementsParVille[$villeId]) && !empty($arrondissementsParVille[$villeId])) {
        $index = $i % count($arrondissementsParVille[$villeId]);
        $arrondissement = $arrondissementsParVille[$villeId][$index];
        $signalement->setArrondissement($arrondissement);
      }

      // Coordonn√©es al√©atoires proches de la ville
      $latOffset = (random_int(-100, 100) / 1000);
      $lngOffset = (random_int(-100, 100) / 1000);
      $signalement->setLatitude($ville->getLatitudeCentre() + $latOffset);
      $signalement->setLongitude($ville->getLongitudeCentre() + $lngOffset);

      $signalement->setDateSignalement(new \DateTime("- {$i} days"));
      $signalement->setStatut($statuts[$i % count($statuts)]);
      $signalement->setPriorite(($i % 3) + 1);
      $signalement->setEtatValidation('valid√©');
      $signalement->setUtilisateur($utilisateurs[$i % count($utilisateurs)]);
      $signalement->setCategorie($categories[$i % count($categories)]);

      $manager->persist($signalement);
    }

    echo "‚úÖ 30 signalements cr√©√©s\n";

    $manager->flush();

    echo "üéâ AppFixtures termin√© avec succ√®s !\n";
  }
}